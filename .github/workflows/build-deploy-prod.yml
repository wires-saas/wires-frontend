name: Build, lint, test and push

on:
  push:
    branches:
      - main
      - develop

jobs:
  package:
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    env:
      DEPLOY_WEBHOOK_URL_PROD: ${{ vars.DEPLOY_WEBHOOK_URL_PROD }}
      DEPLOY_WEBHOOK_TOKEN_PROD: ${{ secrets.DEPLOY_WEBHOOK_TOKEN_PROD }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Cache node modules
        id: cache_node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Generate node modules if cache miss
        if: steps.cache_node_modules.outputs.cache-hit != 'true'
        run: npm install

      - name: Compile Typescript
        run: npm run build:prod

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: wiresantoine/wires-frontend:prod

      - name: Always deploy on dev environment
        if: github.event_name == 'push'
        run: |
          curl --fail -H "Authorization: ${DEPLOY_WEBHOOK_TOKEN_PROD}" -XGET "${DEPLOY_WEBHOOK_URL_PROD}/frontend?version=${GITHUB_SHA}"
        continue-on-error: true

      - name: Check if commit contains release
        id: check_release
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^release\:.+$'
          flags: 'gm'
          error: 'We expect a release message to be in the format "release: <version>"'
        continue-on-error: true

      # On real prod settings, we must enable this step and disable previous one (deploying on each push)
      # - name: Deploy on prod environment only if release
      #  if: steps.check_release.outcome == 'success' && github.event_name == 'push' && github.ref == 'refs/heads/main'
      #  run: |
      #    curl --fail -H "Authorization: ${DEPLOY_WEBHOOK_TOKEN_PROD}" -XGET "${DEPLOY_WEBHOOK_URL_PROD}/frontend?version=${GITHUB_SHA}"
      #  continue-on-error: true
